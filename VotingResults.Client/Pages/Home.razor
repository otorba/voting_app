@page "/"
@inject ResultsHubClient HubClient
@using Voting.Shared
@using VotingResults.Shared
@implements IDisposable

<PageTitle>Voting Results</PageTitle>

@{
    var catVotes = GetVotes(Animal.Cat);
    var dogVotes = GetVotes(Animal.Dog);
    var totalVotes = catVotes + dogVotes;

    // Grow factors: exact proportions when we have data, 1:1 before data arrives
    var catGrow = totalVotes > 0 ? catVotes : 1;
    var dogGrow = totalVotes > 0 ? dogVotes : 1;

    var catPct = totalVotes > 0 ? $"{catVotes * 100.0 / totalVotes:0}%" : null;
    var dogPct = totalVotes > 0 ? $"{dogVotes * 100.0 / totalVotes:0}%" : null;

    var aria = $"Cat {catVotes} votes. Dog {dogVotes} votes.";
}

<div class="voting-container" role="img" aria-label="@aria">
    <section class="voting-area cat-area" style="flex-grow:@catGrow;">
        <div class="content">
            <div class="animal-title">Cat</div>
            <div class="vote-count">
                @catVotes <span class="suffix">votes</span>
                @if (catPct is not null)
                {
                    <span class="percent">(@catPct)</span>
                }
            </div>
        </div>
    </section>

    <section class="voting-area dog-area" style="flex-grow:@dogGrow;">
        <div class="content">
            <div class="animal-title">Dog</div>
            <div class="vote-count">
                @dogVotes <span class="suffix">votes</span>
                @if (dogPct is not null)
                {
                    <span class="percent">(@dogPct)</span>
                }
            </div>
        </div>
    </section>
</div>

@if (!string.IsNullOrEmpty(_statusMessage))
{
    <div class="status-overlay" aria-live="polite">
        @_statusMessage
        @if (_lastUpdated is not null)
        {
            <span> | Last update: @_lastUpdated.Value.ToLocalTime().ToString("T")</span>
        }
    </div>
}

@code {
    private int _updateCount;
    private DateTimeOffset? _lastUpdated;
    private Dictionary<Animal, int>? _results;
    private string _statusMessage = "Connecting to live updates...";

    protected override async Task OnInitializedAsync()
    {
        HubClient.ResultsChanged += OnResultsChangedAsync;

        try
        {
            await HubClient.EnsureConnectedAsync();
            _statusMessage = "Listening for live result updates.";
        }
        catch (Exception ex)
        {
            _statusMessage = $"Unable to connect to live updates: {ex.Message}";
        }
    }

    private Task OnResultsChangedAsync(VotingResultsDto votingResults)
    {
        _updateCount++;
        _results = votingResults.Results;
        _lastUpdated = DateTimeOffset.Now;
        _statusMessage = _updateCount == 1
            ? "Received 1 update."
            : $"Received {_updateCount} updates.";

        return InvokeAsync(StateHasChanged);
    }

    private int GetVotes(Animal animal)
    {
        if (_results is null) return 0;
        return _results.TryGetValue(animal, out var v) ? v : 0;
    }

    public void Dispose()
    {
        HubClient.ResultsChanged -= OnResultsChangedAsync;
    }
}