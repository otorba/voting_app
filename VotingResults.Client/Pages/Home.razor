@page "/"
@inject ResultsHubClient HubClient
@using Voting.Shared
@using VotingResults.Shared
@implements IDisposable

<PageTitle>Voting Results</PageTitle>

@if (_results is not null)
{
    var catVotes = _results.ContainsKey(Animal.Cat) ? _results[Animal.Cat] : 0;
    var dogVotes = _results.ContainsKey(Animal.Dog) ? _results[Animal.Dog] : 0;
    var totalVotes = catVotes + dogVotes;

    var catFlex = totalVotes > 0 ? catVotes : 1;
    var dogFlex = totalVotes > 0 ? dogVotes : 1;

    <div class="voting-container">
        <div class="voting-area cat-area" style="flex: @catFlex;">
            <div class="animal-title">Cat</div>
            <div class="vote-count">@catVotes votes</div>
        </div>
        <div class="voting-area dog-area" style="flex: @dogFlex;">
            <div class="animal-title">Dog</div>
            <div class="vote-count">@dogVotes votes</div>
        </div>
    </div>
}
else
{
    <div class="voting-container">
        <div class="voting-area cat-area" style="flex: 1;">
            <div class="animal-title">Cat</div>
            <div class="vote-count">0 votes</div>
        </div>
        <div class="voting-area dog-area" style="flex: 1;">
            <div class="animal-title">Dog</div>
            <div class="vote-count">0 votes</div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(_statusMessage))
{
    <div class="status-overlay">
        @_statusMessage
        @if (_lastUpdated is not null)
        {
            <span> | Last update: @_lastUpdated.Value.ToLocalTime().ToString("T")</span>
        }
    </div>
}

@code {
    private int _updateCount;
    private DateTimeOffset? _lastUpdated;
    private Dictionary<Animal, int>? _results;
    private string _statusMessage = "Connecting to live updates...";

    protected override async Task OnInitializedAsync()
    {
        HubClient.ResultsChanged += OnResultsChangedAsync;

        try
        {
            await HubClient.EnsureConnectedAsync();
            _statusMessage = "Listening for live result updates.";
        }
        catch (Exception ex)
        {
            _statusMessage = $"Unable to connect to live updates: {ex.Message}";
        }
    }

    private Task OnResultsChangedAsync(VotingResultsDto votingResults)
    {
        _updateCount++;
        _results = votingResults.Results;
        _lastUpdated = DateTimeOffset.Now;
        _statusMessage = _updateCount == 1
            ? "Received 1 update."
            : $"Received {_updateCount} updates.";

        return InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        HubClient.ResultsChanged -= OnResultsChangedAsync;
    }

}